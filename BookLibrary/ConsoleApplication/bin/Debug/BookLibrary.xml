<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BookLibrary</name>
    </assembly>
    <members>
        <member name="T:BookLibrary.BinaryBookListStorage">
            <summary>
            This class represents the storage of books based on binary file.
            </summary>
        </member>
        <member name="M:BookLibrary.BinaryBookListStorage.#ctor(System.String)">
            <summary>
            Constructor with parameters which initializes path to the storage.
            </summary>
            <param name="fileName">Name of file which will be represent a storage.</param>
        </member>
        <member name="M:BookLibrary.BinaryBookListStorage.LoadBooks">
            <summary>
            This method loads books from the storage.
            </summary>
            <returns>Returns list of books which contains into the storage.</returns>
        </member>
        <member name="M:BookLibrary.BinaryBookListStorage.SaveBooks(System.Collections.Generic.IEnumerable{BookLibrary.Book})">
            <summary>
            This method saves a collection of books into the storage.
            </summary>
            <param name="books">List of books which will be stored.</param>
        </member>
        <member name="F:BookLibrary.BinaryBookListStorage.path">
            <summary>
            Full path to the file which represents a storage.
            </summary>
        </member>
        <member name="T:BookLibrary.Book">
            <summary>
            This class represents a book which has properties such as name of author, title of the book, publish date and price.
            </summary>
        </member>
        <member name="P:BookLibrary.Book.Author">
            <summary>
            This property returns name the author of the book.
            </summary>
        </member>
        <member name="P:BookLibrary.Book.Title">
            <summary>
            This property returns title of the book.
            </summary>
        </member>
        <member name="P:BookLibrary.Book.PublishDate">
            <summary>
            This property returns book's publish day.
            </summary>
        </member>
        <member name="P:BookLibrary.Book.Price">
            <summary>
            This property returns price of the book.
            </summary>
        </member>
        <member name="M:BookLibrary.Book.#ctor">
            <summary>
            Default constructor which calls another constructor with parameters.
            </summary>
        </member>
        <member name="M:BookLibrary.Book.#ctor(System.String,System.String,System.String,System.Double)">
            <summary>
            Constructor with parameters.
            </summary>
            <param name="authorName">Name the author of the book.</param>
            <param name="bookTitle">Title of the book.</param>
            <param name="bookPublishDate">Book's publish day.</param>
            <param name="bookPrice">Price of the book.</param>
        </member>
        <member name="M:BookLibrary.Book.Equals(BookLibrary.Book)">
            <summary>
            This method compares current book to another one. Returns true if they are the same.
            </summary>
            <param name="other">Another book for comparison.</param>
            <returns>Returns true if they are the same. Returns false if the aren't equal.</returns>
        </member>
        <member name="M:BookLibrary.Book.Equals(System.Object)">
            <summary>
            This method compares current book and another object. If object can be cast to Book type then calls Equals method with parameter type of Book.
            </summary>
            <param name="obj">Instance of Object.</param>
            <returns>Return false if objects aren't equal.</returns>
        </member>
        <member name="M:BookLibrary.Book.CompareTo(BookLibrary.Book)">
            <summary>
            This method compare current book to another one by publish date.
            </summary>
            <param name="other">Another book for comparison.</param>
            <returns>Returns 0 if these books were published at the same time. Returns -1 if current book was published earlier then another one.</returns>
        </member>
        <member name="M:BookLibrary.Book.CompareTo(System.Object)">
            <summary>
            This method compare current book to an object.
            </summary>
            <param name="obj">Instance of System.Object</param>
        </member>
        <member name="M:BookLibrary.Book.ToString">
            <summary>
            This method returns formated string with information about book such as name the author, title of the book, book's publish date, price of the book.
            </summary>
        </member>
        <member name="M:BookLibrary.Book.GetHashCode">
            <summary>
            This method returns hash code of string which represents book instance.
            </summary>
            <returns>Returns hash code.</returns>
        </member>
        <member name="F:BookLibrary.Book.author">
            <summary>
            Name the author of the book.
            </summary>
        </member>
        <member name="F:BookLibrary.Book.title">
            <summary>
            Title of the book.
            </summary>
        </member>
        <member name="F:BookLibrary.Book.publishDate">
            <summary>
            Book's publish date.
            </summary>
        </member>
        <member name="F:BookLibrary.Book.price">
            <summary>
            Price of the book.
            </summary>
        </member>
        <member name="T:BookLibrary.BookListService">
            <summary>
            This class provides basic operation with collection of books.
            </summary>
        </member>
        <member name="P:BookLibrary.BookListService.Books">
            <summary>
            This property returns read only collection of books.
            </summary>
        </member>
        <member name="M:BookLibrary.BookListService.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:BookLibrary.BookListService.#ctor(System.Collections.Generic.IEnumerable{BookLibrary.Book})">
            <summary>
            This constructor takes books as IEnumerable.
            </summary>
            <param name="books">Books as IEnumerable.</param>
        </member>
        <member name="M:BookLibrary.BookListService.AddBook(BookLibrary.Book)">
            <summary>
            Add a book to a service.
            </summary>
            <param name="book">Book which must be added.</param>
        </member>
        <member name="M:BookLibrary.BookListService.RemoveBook(BookLibrary.Book)">
            <summary>
            Remove book from a storage.
            </summary>
            <param name="book">The book which must be removed.</param>
        </member>
        <member name="M:BookLibrary.BookListService.SortByTag(System.Comparison{BookLibrary.Book})">
            <summary>
            This method sorts list of books by using delegate Comparision.
            </summary>
            <param name="comparison">Criterion for comparison.</param>
        </member>
        <member name="M:BookLibrary.BookListService.SortByTag(System.Collections.Generic.IComparer{BookLibrary.Book})">
            <summary>
            This method sorts list of books by using IComparer.
            </summary>
            <param name="comparer">Criterion for comparison.</param>
        </member>
        <member name="M:BookLibrary.BookListService.FindByTag(System.Predicate{BookLibrary.Book})">
            <summary>
            This method finds list of books by given tag.
            </summary>
            <returns>List of books.</returns>
        </member>
        <member name="F:BookLibrary.BookListService.books">
            <summary>
            List of books.
            </summary>
        </member>
        <member name="T:BookLibrary.IBookListStorage">
            <summary>
            Interface provides two basic operation for storage of books.
            </summary>
        </member>
        <member name="M:BookLibrary.IBookListStorage.LoadBooks">
            <summary>
            Method which loads books from a storage.
            </summary>
            <returns>Returns list of books.</returns>
        </member>
        <member name="M:BookLibrary.IBookListStorage.SaveBooks(System.Collections.Generic.IEnumerable{BookLibrary.Book})">
            <summary>
            This method packs books into a storage.
            </summary>
            <param name="books">Books which must be stored.</param>
        </member>
        <member name="T:BookLibrary.SerializeBookListStorage">
            <summary>
            This class provides basic read/write operations for collection of books by using serialize technology.
            </summary>
        </member>
        <member name="M:BookLibrary.SerializeBookListStorage.#ctor(System.String)">
            <summary>
            Constructor with parameters which initializes path to the storage.
            </summary>
            <param name="fileName">Name of file which will be represent a storage.</param>
        </member>
        <member name="M:BookLibrary.SerializeBookListStorage.LoadBooks">
            <summary>
            This method reads books from a file.
            </summary>
            <returns>Returns collection of books.</returns>
        </member>
        <member name="M:BookLibrary.SerializeBookListStorage.SaveBooks(System.Collections.Generic.IEnumerable{BookLibrary.Book})">
            <summary>
            This method saves the given collection of books into the file.
            </summary>
            <param name="books">Collection of books which will be saved into the file.</param>
        </member>
        <member name="F:BookLibrary.SerializeBookListStorage.path">
            <summary>
            Full path to the file which represents a storage.
            </summary>
        </member>
        <member name="T:BookLibrary.XmlBookListStorage">
            <summary>
            This class provides basic read/write to XML file operations.
            </summary>
        </member>
        <member name="M:BookLibrary.XmlBookListStorage.#ctor(System.String)">
            <summary>
            Constructor with parameters which initializes path to the storage.
            </summary>
            <param name="fileName">Name of file which will be represent a storage.</param>
        </member>
        <member name="M:BookLibrary.XmlBookListStorage.LoadBooks">
            <summary>
            This method takes a collection of books from a XML file.
            </summary>
            <returns>Returns collection of books.</returns>
        </member>
        <member name="M:BookLibrary.XmlBookListStorage.SaveBooks(System.Collections.Generic.IEnumerable{BookLibrary.Book})">
            <summary>
            This method saves the given collection of books into the file.
            </summary>
            <param name="books">Collection of books which will be saved into the file.</param>
        </member>
        <member name="F:BookLibrary.XmlBookListStorage.path">
            <summary>
            Full path to the file which represents a storage.
            </summary>
        </member>
        <member name="T:BookLibrary.SingleLogger">
            <summary>
            This is common class for writting messages to log.
            </summary>
        </member>
        <member name="F:BookLibrary.SingleLogger.log">
            <summary>
            This is common log for application.
            </summary>
        </member>
    </members>
</doc>
